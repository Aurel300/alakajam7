class Rune {
  public static var spawn:Map<Int, Array<Float>> = [];

  public static function init():Void {
    var runes = ["
 000000000000000
 000000000000000
 000000000000000
 000000000000000
 00x00x00x00x00x
 000000000000000
 0x00x00x00x00x0
 000000000000000
 x00x00x00x00x00
 000000000000000
 000000000000000
 000000000000000
 000000000000000
 000000000000000
 000000000000000", "
 000000000000000
 000000000000000
 00000x000x00000
 000x000x000x000
 000000000000000
 00x00x000x00x00
 000000000000000
 00x00x000x00x00
 000000000000000
 000000000000000
 000000000000000
 000000000000000
 000000000000000
 000000000000000
 000000000000000", "
 000000000000000
 000000000000000
 000000000000000
 000000000000000
 00x00x00x00x00x
 000000000000000
 x00x00x00x00x00
 000000000000000
 0x00x00x00x00x0
 000000000000000
 000000000000000
 000000000000000
 000000000000000
 000000000000000
 000000000000000", "
 000000000000000
 000000000000000
 000000000000000
 000000000000000
 x0x0x0x0x0x0x0
 000000000000000
 0x0x0x0x0x0x0x
 000000000000000
 000000000000000
 x0x0x0x0x0x0x0
 000000000000000
 0x0x0x0x0x0x0x
 000000000000000
 000000000000000
 000000000000000", "
 000000000000000
 000000000000000
 000000000000000
 000000000000000
 xxxx
 000000000000000
 xxx
 000000000000000
 xxxxxx
 000000000000000
 xxxxxxxx
 000000000000000
 000000000000000
 000000000000000
 000000000000000"
    ].map(parse);
    for (y in 0...23) {
      var rune = runes[y % runes.length];
      for (sy in 0...15) {
        if (rune[sy].length == 0)
          continue;
        spawn[20 + y * 15 + sy] = rune[sy];
      }
    }
  }

  static function parse(data:String):Array<Array<Float>> {
    var lines = data.split("\n");
    lines.shift();
    return [ for (line in lines) {
      var poles = [];
      var offset = (switch (line.charAt(0)) {
        case " ": 0.0;
        case _: throw "?";
      });
      for (x in 0...line.length - 1) {
        var ang = (x / line.length - 1) * Math.PI * 2;
        if (line.charAt(1 + x) == "x") {
          poles.push(offset + ang);
        }
      }
      poles;
    } ];
  }
}
